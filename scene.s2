(def qmap (lambda (list)
  (if (= (size list) 0)
    list
    (conc (quasicode (first list)) (qmap (rest list))))))

(def quasicode (lambda (arg)
  (if (not (list? arg)) (quote arg)
    (if (same (first arg) 'unquote)
      (first1 (rest arg))
      (conc 'list (qmap arg))))))

(def quasiquote (macro (arg)
  (quasicode arg)))

(def and (macro (a b) `(if ,a (if ,b true false) false)))

(def for (macro (var from to body)
  `(seq
    (def ,var ,from)
    (while (< ,var ,to) (seq
      (def _for_res ,body)
      (set ,var (+ ,var 1))
      _for_res)))))

(def rand_a 0)
(def rand_b 0)
(def rand_c 0)
(def rand_d 0)

(def rand32 (lambda () (seq
  (def e (- rand_a (| (<< rand_b 27) (>>> rand_b 5))))
  (set rand_a (^ rand_b (| (<< rand_c 17) (>>> rand_c 15))))
  (set rand_b (+ rand_c rand_d))
  (set rand_c (+ rand_d e))
  (set rand_d (+ e rand_a))
  (>>> rand_d 0))))

(def rand (lambda () (seq
  (def r (rand32))
  (def s (+ 0 r))
  (def t (/ s 4294967295))
  t)))

(def rand_seed (lambda (seed) (seq
  (set rand_a 0xf1ea5eed)
  (set rand_b seed)
  (set rand_c seed)
  (set rand_d seed)
  (for i 0 20 (rand32)))))

(rand_seed 17)

; TODO vectors?
(def min (lambda (a b)
  (if (< a b) a b)))

(def max (lambda (a b)
  (if (> a b) a b)))

(def sum (lambda (vec) (+ (: vec x) (: vec y) (: vec z))))
(def length (lambda (vec) (sqrt (sum (* vec vec)))))
(def length-squared (lambda (vec) (sum (* vec vec))))
(def normalized (lambda (vec) (* vec (/ 1 (length vec)))))

(def dot (lambda (a b) (sum (* a b))))

(def rand-sphere (lambda vec3f () (seq
  (def rand2 (lambda () (- (* (rand) 2) 1)))
  (def v (vec3f (rand2) (rand2) (rand2)))
  (if (<= (length v) 1)
    v
    (rand-sphere)))))

(def rand-halfsphere (lambda (normal) (seq
  (def r (normalized (rand-sphere)))
  (if (< (dot normal r) 0)
    (- 0 r)
    r))))

(def cos-weighted-halfsphere (lambda vec3f (normal) (seq
  (def v (normalized (rand-sphere)))
  (def d (dot normal v))
  (if (< d 0) (seq
    (set d (- 0 d))
    (set v (- 0 v))))
  (if (<= (rand) d)
    v
    (cos-weighted-halfsphere normal)))))

(def get-trace-fn (lambda (thing) (seq
  (if (struct? thing)
    (: thing fn)
    thing))))

(def make-bound (lambda (from to)
  (make-struct (from from) (to to))))

(def sphere_internal (lambda (ray res center rsq) (seq
  (def pos (: ray pos))
  (def dir (: ray dir))
  (set pos (- pos center))
  (def p (sum (* 2 pos dir)))
  (def inside (- (+ rsq (* p p (/ 1 4))) (sum (* pos pos))))
  (if (>= inside 0)
    (seq
      (def sq (sqrt inside))
      (def k (- 0 (/ p 2)))
      (def k1 (- k sq))
      (def k2 (+ k sq))
      (if (> k2 0)
        (seq
          (def distance (if (> k1 0) k1 k2))
          (set (: res success) true)
          (set (: res distance) distance)
          (set (: res normal) (+ pos (* dir distance)))
          (set (: res emit) (vec3f 0))
          (set (: res reflect) (vec3f 1)))))))))

(def sphere (lambda (center radius) (seq
  (def rsq (* radius radius))
  ;(lambda (ray res) (sphere_internal ray res center rsq)))))
  (make-struct
    (bound (make-bound (- center (vec3f radius)) (+ center (vec3f radius))))
    (fn (lambda (ray res) (sphere_internal ray res center rsq)))))))

(def bound_internal (lambda (from to ray) (seq
  (def enter (vec3f (- 0 Infinity)))
  (def exit (vec3f Infinity))
  ; shift ray into origin
  (def rfrom (- from (: ray pos)))
  (def rto (- to (: ray pos)))
  (def dir (: ray dir))
  (if (!= (: dir x) 0) (seq
    (def a (/ (: rfrom x) (: dir x)))
    (def b (/ (: rto x) (: dir x)))
    (set (: enter x) (min a b))
    (set (: exit x) (max a b))))
  (if (!= (: dir y) 0) (seq
    (def a (/ (: rfrom y) (: dir y)))
    (def b (/ (: rto y) (: dir y)))
    (set (: enter y) (min a b))
    (set (: exit y) (max a b))))
  (if (!= (: dir z) 0) (seq
    (def a (/ (: rfrom z) (: dir z)))
    (def b (/ (: rto z) (: dir z)))
    (set (: enter z) (min a b))
    (set (: exit z) (max a b))))
  (def last_entry (max (max (: enter x) (: enter y)) (: enter z)))
  (def first_exit (min (min (: exit x) (: exit y)) (: exit z)))
  ; if entry is before exit, and exit is ahead of us
  (and (>= first_exit last_entry) (>= first_exit 0)))))

(def bound (lambda (from to obj) (seq
  (def fn (get-trace-fn obj))
  (rewrap obj (lambda (ray res) (seq
    (if (bound_internal from to ray)
      (fn ray res))))))))

(def plane_internal (lambda (ray res normal base) (seq
  (def pos (: ray pos))
  (def dir (: ray dir))
  (def denom (sum (- 0 (* dir normal))))
  (def predist (sum (* normal (- pos base))))
  (if (> (* denom predist) 0)
    (seq
      (set (: res success) true)
      (set (: res reflect) (vec3f 1))
      (set (: res emit) (vec3f 0))
      (set (: res normal) normal)
      (if (> denom 0)
        (set (: res distance) (/ predist denom))
        (set (: res distance) (/ 1 0))))))))

(def plane (lambda (normal base)
  (lambda (ray res) (plane_internal ray res normal base))))

(def rewrap (macro (fn lamb) 
  `(if (struct? ,fn)
    (make-struct
      (bound (: ,fn bound))
      (fn ,lamb))
    ,lamb)))

(def emit (lambda (color obj) (seq
  (def fn (get-trace-fn obj))
  (rewrap obj (lambda (ray res) (seq
    (fn ray res)
    (set (: res emit) color)))))))

(def reflect (lambda (color obj) (seq
  (def fn (get-trace-fn obj))
  (rewrap obj (lambda (ray res) (seq
    (fn ray res)
    (set (: res reflect) color)))))))

(def group_internal (lambda (ray res1 res2) (seq
  (if (and (: res2 success) (not (: res1 success)))
    (set res1 res2)
  (if (and (: res1 success) (: res2 success))
    (if (< (: res2 distance) (: res1 distance))
      (set res1 res2)))))))

(def group (lambda (obj1 obj2) (seq
  (def fn1 (get-trace-fn obj1))
  (def fn2 (get-trace-fn obj2))
  (make-struct
    (bound (merge-bounding-box
      (get-bounding-box obj1)
      (get-bounding-box obj2)))
    (fn (lambda (ray res1) (seq
    (def res2 (make-res))
    (fn1 ray res1)
    (fn2 ray res2)
    (group_internal ray res1 res2))))))))

(def nothing (lambda ()
  (lambda (ray res) nop)))

(def get-bounding-box (lambda (obj)
  (if (struct? obj)
    (: obj bound)
    (make-bound (vec3f (- 0 Infinity)) (vec3f Infinity)))))

(def merge-bounding-box (lambda (box1 box2) (seq
  (make-bound
    (vec3f
      (min (: box1 from x) (: box2 from x))
      (min (: box1 from y) (: box2 from y))
      (min (: box1 from z) (: box2 from z)))
    (vec3f
      (max (: box1 to x) (: box2 to x))
      (max (: box1 to y) (: box2 to y))
      (max (: box1 to z) (: box2 to z)))))))

(def infinite-sized-box (lambda (box)
  (and
    (and (= (: box from x) (- 0 Infinity))
      (and
        (= (: box from y) (- 0 Infinity))
        (= (: box from z) (- 0 Infinity))))
    (and (= (: box to x) Infinity)
      (and
        (= (: box to y) Infinity)
        (= (: box to z) Infinity))))))

(def bound-group (lambda (a b) (seq
  (def box1 (get-bounding-box a))
  (def box2 (get-bounding-box b))
  (def combined-box (merge-bounding-box box1 box2))
  (if (infinite-sized-box combined-box)
    ; then
    (group a b)
    ; else
    (bound
      (: combined-box from)
      (: combined-box to)
      (group a b))))))

(def for/group-body (lambda (var from to body)
  (if (= from to)
    '(nothing)
    (if (= (+ 1 from) to)
      `(seq (def ,var ,from) ,body)
      (seq
        (def pivot (+ from (floor (/ (- to from) 2))))
        (def left (for/group-body var from pivot body))
        (def right (for/group-body var pivot to body))
        `(bound-group ,left ,right))))))

(def for/group (macro (var from to body)
  (for/group-body var from to body)))

(def coords-ray (lambda (x y) (seq
  (def ratio (/ dw dh))
  (def ray (make-ray))
  (set (: ray pos) (vec3f
    0
    0
    (/ (- projscale) fov)))
  (set (: ray dir) (normalized (vec3f
    (* ratio fov (- (/ x (/ dw 2)) 1))
    (* fov (- 1 (/ y (/ dh 2))))
    1)))
  ray)))

(def fuzz (lambda (fn)
  (lambda (ray res) (seq
    (def ray2 (make-ray))
    (set (: ray2 pos) (: ray pos))
    (set (: ray2 dir) (normalized (
      +
      (vec3f (/ (rand) dw) (/ (rand) dh) 0)
      (: ray dir))))
    (fn ray2 res)))))
  
(def pathtrace (lambda (depth scene) (seq
  (def fn (get-trace-fn scene))
  (def pt_internal (lambda void (ray res depth) (seq
    (set (: res success) false)
    (fn ray res)
    (if (and
        (> depth 0)
        (and
          (: res success)
          (and
            (isfinite (: res distance))
            (> (length-squared (: res reflect)) 0))))
      (seq
        (def ray2 (make-ray))
        (def startpos (+
          (: ray pos)
          (* (: ray dir) (: res distance))
          (* 0.0001 (: res normal))))
        (set (: ray2 pos) startpos)
        (set (: ray2 dir) (cos-weighted-halfsphere (: res normal)))
        (def res2 (make-res))
        (pt_internal ray2 res2 (- depth 1))
        (if (: res2 success)
          (set (: res emit)
            (+ (: res emit) (* (: res reflect) (: res2 emit))))))))))
  (lambda (ray res) (pt_internal ray res depth)))))

(def average (lambda (count scenefun)
  (lambda (ray res) (seq
    (def color-sum (vec3f 0 0 0))
    (for i 0 count (seq
      (scenefun ray res)
      (def color (vec3f 1 0 0))
      (if (: res success) (seq
        (set color (: res emit))))
      (set color-sum (+ color-sum color))))
    (set (: res emit) (/ color-sum count))))))

(def fun (average 16 (fuzz (pathtrace 5 (group
  (for/group i 0 10
    (for/group k 0 10
      (reflect (+ 0.8 (* 0.1 (vec3f (rand) (rand) (rand))))
        (sphere (vec3f
            (/ (- i 5) 2.5)
            -0.8
            (+ 5 (/ (- k 5) 2.5)))
          0.2))))
  (group
    (emit (vec3f 1) (reflect (vec3f 0) (plane (vec3f 0 -1 0) (vec3f 0 10 0))))
    (plane (vec3f 0 1 0) (vec3f 0 -1 0))))))))

(lambda (x y res) (seq
  (rand_seed (+ x (* y 512)))
  (def ray (coords-ray x y))
  (fun ray res)))
